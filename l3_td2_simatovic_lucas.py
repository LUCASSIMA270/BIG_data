# -*- coding: utf-8 -*-
"""L3_TD2_SIMATOVIC_LUCAS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hR0hsT6GVas7y4yN2tIPQQCsr2Qw13Zq
"""

!apt-get install mysql-server > /dev/null
!service mysql start
!mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '!*L3_ECO*!'"
!pip install mysql-connector-python

#ON IMPORTE TOUS LES "IMPORT" DONT ON AURA BESOIN POUR LA SUITE DU PROGRAMME

import numpy as np
import pandas as pd
import io
import mysql.connector as ms
from google.colab import files

#1) CECI PERMET DE TELECHARGER UN FICHIER PROVENANT DU DISQUE DUR DE L'ORDINATEUR

data_files = 'AMZN_2006-01-01_to_2018-01-01.csv'
uploaded = files.upload()
data_files = io.BytesIO(uploaded[data_files])

#CECI PERMET DE LIRE LES DONNEES DU FICHIER DATAFRAME

df = pd.read_csv(io.BytesIO(uploaded['AMZN_2006-01-01_to_2018-01-01.csv']))
df

#2) CECI PERMET DE SUPPRIMER LA BASE DE DONNEES "MABASE" SI ELLE EXISTE LORS DE CHAQUE EXECUTION DU SCRIPT AFIN D'EVITER LES ERREURS

mydb= ms.connect(
    host='localhost',
    user='root',
    passwd='!*L3_ECO*!'
)

mycursor=mydb.cursor()
mycursor.execute ('DROP DATABASE IF EXISTS MABASE')
print(mycursor)

#CECI PERMET DE CREER LA BASE DE DONNEES "MABASE"

mydb= ms.connect(
    host='localhost',
    user='root',
    passwd='!*L3_ECO*!'
)

mycursor=mydb.cursor()
mycursor.execute ('CREATE DATABASE IF NOT EXISTS MABASE')
print(mycursor)

#CECI PERMET DE SE CONNECTER A LA BASE DE DONNEES "MABASE"

mydb=ms.connect(
    host='localhost',
    user='root',
    passwd='!*L3_ECO*!',
    database='MABASE'
)

#3) CECI PERMET DE SUPPRIMER LA TABLE "AMAZON" DE LA BASE DE DONNEES "MABASE" SI ELLE EXISTE LORS DE CHAQUE EXECUTION DU SCRIPT AFIN D'EVITER LES ERREURS

mycursor=mydb.cursor()
mycursor.execute ('DROP TABLE IF EXISTS MABASE')
print(mycursor)

# CECI PERMET DE CREER LA TABLE "AMAZON" SI ELLE N'EXISTE PAS

mycursor=mydb.cursor()
mycursor.execute("CREATE TABLE IF NOT EXISTS AMAZON(id INT AUTO_INCREMENT PRIMARY KEY, date DATE, close DECIMAL(8,2), volume INT)")
print(mycursor)

#4) CECI PERMET D'INSERER LES ELEMENTS "date", "close" ET "volume" DU FICHIER DATAFRAME DANS LA TABLE "AMAZON" CONTENANT "dates", "date" ET "volume"

sql="INSERT IGNORE INTO AMAZON (date,close,volume) VALUES (%(Date)s,%(Close)s,%(Volume)s)"
val = df[['Date' , 'Close' , 'Volume']].to_dict(orient='records')

mycursor.executemany(sql,val)
mydb.commit()

#5) CECI PERMET DE SELECTIONNER LES DONNEES "CLOSE" (DATES ET VALEURES DES ACTIONS SUPERIEUR A 1000 ET INFERIEUR OU EGALE A 2000)

mycursor=mydb.cursor()
req = mycursor.execute("SELECT date,close FROM AMAZON WHERE close > 1000 and close <= 2000")
myresult = mycursor.fetchall()
for x in myresult:
  print(x)